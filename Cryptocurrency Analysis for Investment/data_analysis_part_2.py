# -*- coding: utf-8 -*-
"""Data analysis part 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rQ-yMQJI5C0p3iFEmoPBUemUz5NzTnaf
"""

!git clone https://github.com/Es-Di-Bee/Crypto-Investment-Analysis.git

import os #directory fix korar jonno
directory = "/content/Crypto-Investment-Analysis/Dataset"
os.chdir(directory)

import pandas as pd
import numpy as np
import os 
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing

df = pd.read_csv('coin_Bitcoin.csv', parse_dates=['Date'])

df.info()

"""# Selecting Volume and Date """

df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df

df=df.groupby('Date').sum()
print(df)

df.plot(figsize=(11, 6))

"""# **For Time series**"""

import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose

seasonal_decompose(df, model='additive',freq=50).plot();

"""# **Holt-Winters Trend**"""

h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
#model = ExponentialSmoothing(endog = df.Volume, trend = "add",seasonal = "add", seasonal_periods =20).fit()

predictions = h_model.forecast(1000)

df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Aave.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_BinanceCoin.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Cardano.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_ChainLink.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Cosmos.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_CryptocomCoin.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_EOS.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Ethereum.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Litecoin.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Monero.csv', parse_dates=['Date'])
df = df[-800:]

df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps = 1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

# print(df.info())

df = pd.read_csv('coin_Polkadot.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Solana.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Stellar.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Tether.csv', parse_dates=['Date'])
df = df[-800:]

df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Tron.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_USDCoin.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_Uniswap.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_WrappedBitcoin.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')

df = pd.read_csv('coin_XRP.csv', parse_dates=['Date'])
df = df.drop(['SNo',	'Name',	'Symbol',	'High',	'Low'	,'Open',	'Close',	'Marketcap'], axis = 1)
df=df.groupby('Date').sum()
h_model=ExponentialSmoothing(df.Volume,trend='add', seasonal='add', seasonal_periods=80).fit()
predictions = h_model.forecast(steps =1000)
df['Volume'].plot(legend=True, label='Test')
predictions.plot(legend=True, label='predicted_test')
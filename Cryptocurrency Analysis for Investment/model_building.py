# -*- coding: utf-8 -*-
"""Model building.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qOzqtMgSN83E_af-989B3_hBsFOSU6e

# **Importing necessary libraries**
"""

import os
import time
import random
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import matplotlib.dates as dates
from datetime import date
import datetime as datetime
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.metrics import MeanSquaredError

!git clone https://github.com/Es-Di-Bee/Crypto-Investment-Analysis.git

dir0='/content/Crypto-Investment-Analysis/Dataset'
files=os.listdir(dir0)
History = 60
paths=[]
for item in files:
      paths+=[os.path.join(dir0,item)]
print(paths[0:3])
files2=files.copy()

rates=[]
for i in range(len(files)):
    data = pd.read_csv(paths[i])
    data['Date'] = pd.to_datetime(data['Date'])
    data['MA60'] = data['Close'].rolling(window=60).mean()
    data['MA60 shift year'] = data['MA60'].shift(250)
    data['Growth Rate'] = (data['MA60']-data['MA60 shift year'])*100/data['MA60 shift year']
    files[i] = data
    rates+=[[i,files2[i][5:-4],data['Growth Rate'].tolist()[-1]]]
print(rates[0:20])

dataGR=pd.DataFrame(columns=['i','Name','Growth Rate %'],data=rates)
dataGR=dataGR.dropna()
dataGR['log growth rate']=dataGR['Growth Rate %'].apply(lambda x:np.log(x))
dataGR2=dataGR.sort_values('Growth Rate %',ascending=False).reset_index(drop=True)
display(dataGR2)

fig = px.bar(dataGR2, x='Name', y='Growth Rate %',title="Crypto Currency Growth Rate")
fig.update_layout(width=900,height=400)              
fig.show()
fig = px.bar(dataGR2, x='Name', y='log growth rate',title="Crypto Currency LOG Growth Rate")
fig.update_layout(width=900,height=400)              
fig.show()

name0='Dogecoin'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Cardano'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='BinanceCoin'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Solana'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Ethereum' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='WrappedBitcoin' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Polkadot' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Stellar'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Iota'  #### select your favorite name
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Litecoin' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='XRP'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Bitcoin' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Tron'
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data[
                                'Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Cosmos'
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Monero'
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='ChainLink'  
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='EOS' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='NEM'
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='USDCoin' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='Tether' 
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

name0='CryptocomCoin'
i=dataGR2[dataGR2['Name']==name0]['i'].tolist()[0]
print(i,name0)
data=files[i]

fig=make_subplots(specs=[[{"secondary_y":False}]])
fig.add_trace(go.Scatter(x=data['Date'],y=data['Growth Rate'],name='Growth Rate'),secondary_y=False,)
fig.update_layout(autosize=False,width=800,height=400,title_text=name0+' Growth Rate')
fig.update_xaxes(title_text="Date")
fig.update_yaxes(title_text="Growth Rate %",secondary_y=False)
fig.show()

def read_data ():
    coin_no = 0
    for name in os.listdir(dir0):
        coin_no += 1
        max_length, min_length = 0, 1000000
    for name in os.listdir(dir0):
        df = pd.read_csv(dir0 + "/" + name, parse_dates=['Date'])
        length = df.shape[0]
        if max_length < length:
            max_length = length
        if min_length > length:
            min_length = length


    data = np.zeros ((coin_no, max_length))
    lengths = np.zeros(coin_no, dtype = int)
    i = 0
    for name in os.listdir(dir0):
        short_name = name[5:-4]
        df = pd.read_csv(dir0 + "/" + name, parse_dates=['Date'])
        length = df.shape[0]
        lengths[i] = length
        print (i, short_name, length)
        data[i, 0:length] = df['High'].values  # We only keep High price as a sequence!
        i += 1
    
    return coin_no, lengths, data

coin_no, lengths, data = read_data ()
print ("Got", coin_no, "coins.")

def scale_data (data, lengths):
    coin_no = data.shape[0]
    shift = np.zeros (coin_no)
    factor = np.zeros (coin_no)
    for i in range (coin_no):
        max_val = data[i,:lengths[i]].max()
        min_val = data[i, :lengths[i]].min()
        shift[i] = min_val
        factor[i] = max_val - min_val
        data[i,0:lengths[i]] = (data[i,0:lengths[i]]-shift[i])/factor[i]
    return (shift, factor)
    
shift, factor = scale_data (data, lengths)

def create_sequences (data, lengths, start, end):
    x = []
    y = []
    for i in range (start, end):   # Go only over the specified coins
        for j in range(History, lengths[i]):
            x.append(data[i, j-History:j])
            y.append(data[i, j])
    return np.array(x)[:, :, np.newaxis], np.array(y)

x_train, y_train = create_sequences(data, lengths, 0, 18)
print ("Got", y_train.shape[0], "training sequenes.")
x_val, y_val = create_sequences(data, lengths, 18, 22)
print ("Got", y_val.shape[0], "validation sequenes.")
x_test, y_test = create_sequences(data, lengths, 22, 23)
print ("Got", y_test.shape[0], "test sequenes.")

"""**LSTM Model**"""

def build_lstm ():
    # Build an LSTM model
    model = Sequential()
    model.add(LSTM(128, return_sequences=True, input_shape= (History, 1)))
    model.add(LSTM(64, return_sequences=False))
    model.add(Dense(25))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error', metrics=[MeanSquaredError()])
    model.summary()
    
    return model

model = build_lstm()

hist = model.fit(x_train, y_train, validation_data = (x_val, y_val), 
              batch_size=32, epochs=5)

def show_stats (hist):
    plt.plot(hist.history['loss'])
    plt.plot(hist.history['val_loss'])
    plt.title("Model loss")
    plt.ylabel("Loss")
    plt.xlabel("Epoch")
    plt.legend(["Training loss","Validation loss"])
    plt.show()

show_stats (hist)

predictions = model.predict(x_test)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
print ("Root mean square error on test data:", rmse)    
plt.plot(predictions*factor[22] + shift[22])
plt.plot(y_test*factor[22] + shift[22])    
plt.legend(["Predictions","Real data"])
plt.show()

"""**Applying Prophet**"""

# INPUT_FILE = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Aave.csv', parse_dates=['Date']).drop(['SNo', 'Symbol'], axis=1)
from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Aave.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

# INPUT_FILE = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Bitcoin.csv', parse_dates=['Date']).drop(['SNo', 'Symbol'], axis=1)
from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Bitcoin.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

# INPUT_FILE = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Cardano.csv', parse_dates=['Date']).drop(['SNo', 'Symbol'], axis=1)
from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Cardano.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

# INPUT_FILE = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Cosmos.csv', parse_dates=['Date']).drop(['SNo', 'Symbol'], axis=1)
from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Cosmos.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

# INPUT_FILE = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Cosmos.csv', parse_dates=['Date']).drop(['SNo', 'Symbol'], axis=1)
from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Ethereum.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Litecoin.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Solana.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Tether.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_USDCoin.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)

from fbprophet import Prophet
df = pd.read_csv('/content/Crypto-Investment-Analysis/Dataset/coin_Uniswap.csv', parse_dates=['Date'], usecols=["Date","Close"])
df.columns = ["ds", "y"]

m = Prophet()
m.fit(df);
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

m.plot_components(forecast)